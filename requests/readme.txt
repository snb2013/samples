Тестовое задание для позиции ETL/Backend Python Engineer, Palta Brain

Нужно написать программу, которая реализовывала бы следующий функционал. Фокус не на том, чтобы все работало и были учтены все краевые случаи, а посмотреть на логику и подходы к разработке.

Ориентировочное необходимое время 2-3 часа.

Входные данные:
 - файл с событиями, разделенными \n
 - json с конфигом клиентов

Конфиг клиентов представляет собой вот что:
{
 "foo": ["http://100.26.169.143:8088/v1/", "http://100.26.169.143:8088/v2/"],
 "bar": ["http://100.26.169.143:8088/events/", "http://100.26.169.143:8088/v1/"],
 "baz": ["http://100.26.169.143:8088/events/", "http://100.26.169.143:8088/v2/"]
}

Все указанные эндпоинты валидны и возвращают 50/50 или 200 или 500.

Программа считывает события из входящего потока.
В тестовом случае поток считывается из файла.
Файл содержит события в формате JSON, разделённые \n.
Структура события такова:
{"client_id": <string>, "payload": <string>, "id": <int>}

У валидного события есть поля "client_id" и "payload".
Поле id опционально, но если оно есть - то последующие события с повторяющимся id нужно игнорировать, сообщив в лог.
Невалидные события следует игнорировать, сообщив об этом в лог.
Если клиента нет в конфиге - также сообщаем в лог.

Для каждого события из входного потока:
 - сформировать HTTP POST-запрос с body == payload
 - послать его на каждый из URL, указанных в конфиге клиента

В случае ответа, отличного от 200, следует повторить запрос через 1c неограниченное число раз, каждый раз увеличивая интервал в 2 раза, попутно логируя результаты.
Если в рамках обработки одного события от одного эндпоинта получен 200, а от другого - нет, то успешный запрос повторять не нужно.

События от одного и того же клиента должны обрабатываться последовательно.
События от разных клиентов нужно обрабатывать одновременно, но не более 4 клиентов одновременно.

Самое главное - программа должна уметь сохранять своё состояние (в файле). Т.е. при прерывании и перезапуске не должно быть двойной отправки.
После рестарта все "ожидающие" запросы нужно повторить немедленно и ретраить заново.